# JVM과 GC

https://velog.io/@jsj3282/16.-JVM%EC%9D%80-%EB%8F%84%EB%8C%80%EC%B2%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EB%8F%99%EB%90%A0%EA%B9%8C
https://velog.io/@jsj3282/17.-%EB%8F%84%EB%8C%80%EC%B2%B4-GC%EB%8A%94-%EC%96%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D%ED%95%A0%EA%B9%8C
https://velog.io/@jsj3282/18.-GC%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%88%98%ED%96%89%EB%90%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EC%A7%80-%EB%B3%B4%EA%B3%A0-%EC%8B%B6%EB%8B%A4
https://velog.io/@jsj3282/19.-GC-%ED%8A%9C%EB%8B%9D%EC%9D%84-%ED%95%AD%EC%83%81-%ED%95%A0-%ED%95%84%EC%9A%94%EB%8A%94-%EC%97%86%EB%8B%A4

## JVM은 도대체 어떻게 구동될까?

시스템을 배포할 때 그냥 재시작을 한다면, 사용자들은 느린 응답 시간을 겪을 수 있다
-> Warming up이 필요하다

HotSpot VM : 자바 성능을 개선하기 위한 컴파일러 - Just In Time(JIT) 컴파일러의 이름 (HotSpot)
- 프로그램 성능에 영향을 주는 지점에 대한 분석, 부하 최소화 -> 높은 성능과 확장성 제공

HotSpot VM의 세가지 컴포넌트 : VM 런타임, JIT컴파일러, 메모리 관리자

컴파일 : 상위 레벨의 언어로 만들어진 코드를 기계에 의존적인 코드로 변환 하는 것
(자바 javac라는 컴파일러 사용 : 소스코드를 바이트 코드로 된 class 파일로 변환,
JVM :  항상 바이트 코드로 시작, 동적으로 기계에 의존하는 코드로 변환)

모든 코드는 초기 인터프리터에 의해 시작하고, 해당 코드가 충분히 많이 사용될 경우에 컴파일 할 대상이 된다.

JVM은 각 OS에서 작동할 수 있도록 자바 코드를 입력 값(바이트 코드)로 받아 기계어 코드로 변환한다


## 도대체 GC는 언제 발생할까?

GC : 쓰레기 객체 처리

GC를 많이 할수록 응답시간에 많은 영향을 끼친다

자바는 메모리를 GC 알고리즘을 통해 관리한다

하나의 객체는 메모리를 점유하고, 필요하지 않으면 메모리에서 해제되어야 한다.

자바의 데이처 처리 영역에서 GC가 발생하는 부분은 힙 영역이다.

Heap 메모리 : 클래스 인스턴스, 배열이 이 메모리에 쌓인다. 공유(shared) 메모리 라고도 불리우며 
여러 스레드에서 공유하는 데이터들이 저장되는 메모리이다.

Non-heap 메모리 : 자바의 내부 처리를 위해 필요한 영역, 주된 영역이 바로 메서드 영역
	메서드 영역 : 모든 JVM 스레드에서 공유된다. 런타임 상수 풀, 메서드 데이터, 메서드와 생성자 코드가 저장된다.

 Heap영역과 메서드 영역을 JVM이 시작할 때 생성된다.

Heap영역 : young영역 - Eden, Survivor1, Survivor2 / old영역 - 메모리 영역

GC의 원리 : 메모리 할당, 사용 중인 메모리 인식, 사용하지 않는 메모리 인식

GC의 종류 : 
마이너 GC : Young 영역에서 발생하는 GC
메이저 GC : Old 영역이나 Perm 영역에서 발생하는 GC (Full GC)

5가지 GC 방식
JDK 7 이상에서 지원하는 GC 방식에는 다섯 가지가 있다.
Serial Collector(이하 시리얼 콜렉터)
Parallel Collector(이하 병렬 콜렉터)
Parallel Compacting Colletor(이하 병렬 콤팩팅 콜렉터)
Concurrent Mark-Sweep (CMS) Collector(이하 CMS 콜렉터)
Garbage First Collector(이하 G1 콜렉터)

행(Hang)이란 서버가 요청을 처리 못하고 있는 상태를 의미


## GC가 어떻게 수행되고 있는지 보고 싶다

GC가 어떻게 수행되는지 시스템을 분석하려면 jstat이라는 명령을 사용하여 실시간으로 보거나
vervosegc 옵션을 사용하여 로그를 남긴다.  verbosegc 옵션을 자바 수행 옵션에 추가하고, JVM을 재시작해야 한다.

1. 자바 인스턴스 확인을 위한 jps
jps는 해당 머신에서 운영 중인 JVM 목록을 보여준다. JDK의 bin 디렉터리에 있다.
jps [-q] [mlvV] [-Joption] [<hostid>]

플래그 파일이란 .hotspotrc의 확장자를 가지거나 자바 옵션에 -XX:Flags=<file name>로 명시한 파일이다. 이 파일을 통해서 JAVA의 옵션을 지정할 수 있다.

jstat은 GC가 수행되는 정보를 확인하기 위한 명령이다.
jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]

자바 수행 시에 -verbosegc라는 옵션을 넣어 GC를 분석할 수 있다.
java -verbosegc <기타 다른 옵션들> 자바 애플리케이션 이름

-verbosegc -XX:+PrintGCTimeStamps 옵션 적용 후
0.668 : [GC 8128K -> 848K(130112K), 0.0090257 secs]
맨 좌측은 서버가 가동되기 시작한 이후부터 해당 GC가 수행될 때까지의 시간

-XX:+PrintGCDetails 옵션 : GC현상에 대해 정밀분석 가능

메모리 릭이 발생하는지 확인하는 가장 확실한 방법은 verbosegc를 남겨서 보는 방법
또한 Full GC가 일어난 후 Old영역의 메모리 사용량이 80% 이상이면 메모리릭 의심.


## GC튜닝을 항상 할 필요는 없다

다음 경우는 튜닝이 필요 없다.
Xms 옵션과 -Xmx 옵션으로 메모리 크기를 지정했다.
-server 옵션이 포함되어 있다.
그리고
시스템의 로그에 타임아웃 관련 로그가 남아있지 않아야한다 (DB작업 관련 타임아웃, 다른 서버와 통신 시 타임아웃)
==>> 결론은,, JVM 메모리 크기도 지정하지 않았고, Timeout이 지속적으로 발생하고 있다면 GC 튜닝을 하는 것이 좋다.

GC 튜닝은 애플리케이션 메모리 사용도 튜닝작업 같은 것이 다 끝난 이후에 가장 마지막에 하는 것이 좋다.

GC 튜닝의 목적은 1. Old 영역으로 넘어가는 객체 수를 최소화 하는것
-> New 영역의 크기를 잘 조절한다, 
2. Full GC의 실행시간을 줄이는 것
-> Old영역의 크기를 줄인다 -> But, OutOfMemoryError가 발생하거나 Full GC 횟수가 늘어난다.
-> Old영역의 크기를 늘릔다 -> Full GC 수행 횟수는 줄어들지만 실행 시간이 늘어난다.

GC의 성능을 결정하는 옵션들
GC 옵션은 서비스마다 생성되는 객체의 크기도 다르고 살아있는 기간도 다르기 때문에
두대 이상의 서버에 GC옵션을 다르게 적용해 비교해보고 GC시간이 개선된 때에만 옵션을 추가하는 것이 GC 튜닝의 기본 원칙이다.

다음 표는 성능에 영향을 주는 GC 옵션 중 메모리 크기와 관련된 옵션이다.

구분	옵션	설명
힙(heap) 영역 크기	-Xms	JVM 시작 시 힙 영역 크기
힙(heap) 영역 크기	-Xmx	최대 힙 영역 크기
New 영역의 크기	-XX:NewRatio	New 영역과 Old 영역의 비율
New 영역의 크기	-XX:NewSize	New 영역의 크기
New 영역의 크기	-XX:SurvivorRatio	Eden 영역과 Survivor 영역의 비율
이 중에서 가장 자주 사용되는 옵션은 -Xms, -Xmx, -XX:NewRatio 옵션이다. 
특히 -Xms과 -Xmx는 필수로 지정해야 하는 옵션이다. 그리고 NewRatio 옵션을 어떻게 설정하느냐에 따라서 GC 성능에 많은 차이가 발생한다.


GC의 성능에 많은 영향을 주는 또 다른 옵션은 GC 방식이다. 다음 표는 GC 방식에 따라서 지정할 수 있는 옵션이다(JDK 6.0 기준).

구분	옵션	비고
Serial GC	-XX:+UseSerialGC	
ParallelGC	-XX:+UseParallelGC
		-XX:ParallelGCThreads=value	
Parallel Compacting GC	-XX:+UseParallelOldGC	
CMS GC	-XX:+UseConcMarkSweepGC
	-XX:+UseParlNewGC
	-XX:+CMSParallelRemarkEnabled
	-XX:+CMSInitiatingOccupancyFraction=value
	-XX:+UseCMSInitiatingOccupancyOnly	
G1	-XX:+UnlockExperimentalVMOptions
	-XX:+UseG1GC	JDK 6에서는 두 옵션을 반드시 같이 사용해야 함

##GC 튜닝의 절차
1. GC 상황 모니터링
2. 모니터링 결과 분석 후 GC 튜닝 여부 결정
3. GC 방식/메모리 크기 지정
4. 결과 분석
5. 결과가 만족스러울 경우 전체 서버에 반영 및 종료

##JVM 옵션
-XX:+HeapDumpOnOutOfMemoryError : OutOfMemoryError 발생 시에 heap dump를 현재 실행 디렉터리에 생성한다.
-XX:+UseConcMarkSweepGC : GC 방식 중 CMS GC
-verbosegc -XX:+PrintGCTimeStamps : GC현상 정밀분석

##JVM 메모리 누수와 GC
GC가 메모리를 회수하지 못하는 경우, 혹은 GC 자체에 문제가 생기는 경우 -> Memeory Leak이 발생하고 지속될 시 OOM이나
메모리를 할당할 수 없는 Can not allocate memory가 발생할 수 있다. -> 애플리케이션이 멈추거나 종료 될 수 있다

스왑메모리 : 리눅스에서 가상메모리를 스왑메모리 시스템이라 호칭한다.
기본적으로 CentOS에는 스왑 메모리의 파티셔닝 설정이 되어있지 않다.

실제 메모리(RAM)가 아닌 저장소(SSD/HDD)를 사용하기 때문에 속도가 느리지만 메모리 부족이 발생해도 자동으로 스왑 메모리로 확장되며
서비스 중단을 피할 수 있다는 점에서 적절한 사용이 필요하다